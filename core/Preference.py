#######################################################
# 
# Preference.py
# Python implementation of the Class Preference
# Generated by Enterprise Architect
# Created on:
# Original author: Arash Ebrahimnezhad
# 
#######################################################
import controller
import random
from core.Bid import Bid
import operator


class Preference:
    """
    preference has its own data structure and when an object asks preference, it returns that specific data structure.
    In the following there is an example:
    preference = {
        'Brand': [0.45, {'Lenovo': 10, 'Assus': 20, 'Mac': 30}],
        'Monitor': [0.18, {'15': 30, '10': 25, '11': 20}],
        'HDD': [0.38, {'1T': 25, '2T': 32, '3T': 35}]
    }

    d refers to discount factor
    """

    def __init__(self, domain_name: str = None, xml_file_name: str = None, preference_data_structure: dict = None):
        '''
        preference_data_structure = {
            'Brand': [0.45, {'Lenovo': 10, 'Assus': 20, 'Mac': 30}],
            'Monitor': [0.18, {'15': 30, '10': 25, '11': 20}],
            'HDD': [0.38, {'1T': 25, '2T': 32, '3T': 35}],
            'discount_factor = 1,
            'reservation = 0
        }
        :param domain_name:
        :param preference_name:
        '''
        if not isinstance(domain_name, str) and domain_name is not None:
            raise TypeError('domain_name argument must be a string')
        if not isinstance(xml_file_name, str) and xml_file_name is not None:
            raise TypeError('xml_file_name argument must be a string')

        self.__domain_name = domain_name
        self.__xml_file_name = xml_file_name

        if preference_data_structure is None:
            my_controler = controller.Controller()
            self.__preference_data_structure = my_controler.fetch_preference_data_structure(domain_name, xml_file_name)
        else:
            self.__preference_data_structure = preference_data_structure

        self.__d = 1.0
        self.__reservation = 0.0
        if 'discount_factor' in self.__preference_data_structure:
            self.__d = float(self.__preference_data_structure['discount_factor'])
        if 'reservation' in self.__preference_data_structure:
            self.__reservation = float(self.__preference_data_structure['reservation'])

    def get_domain_name(self):
        return self.__domain_name

    def get_preference_name(self):
        return self.__xml_file_name

    def get_preference_data_structure(self):
        '''
        this method returns data structure like this:
        preference_data_structure = {
            'Brand': [0.45, {'Lenovo': 10, 'Assus': 20, 'Mac': 30}],
            'Monitor': [0.18, {'15': 30, '10': 25, '11': 20}],
            'HDD': [0.38, {'1T': 25, '2T': 32, '3T': 35}],
            'discount factor = 1,
            'reservation value = 0
        }
        :param domain_name:
        :param preference_name:
        :return: preference_data_structure
        '''
        return self.__preference_data_structure

    def get_issue_weight(self, issue: str):
        '''
        this method gets an issue like External Monitor and returns weight of that issue like 0.33
        :param issue: an issue like: External Monitor
        :return:
        '''
        return float(self.__preference_data_structure[issue][0])

    def get_issue_item_value(self, issue: str, item: str):
        """
        this method gets an issue like External Monitor and its item like 15'' then returns
        the value of that item and the max value of issue's item
        :param item: like External Monitor
        :param issue: str like 15''
        :return: value, max_value
        """
        if not isinstance(issue, str):
            raise TypeError('issue argument must be an instance of string')
        if not isinstance(item, str):
            raise TypeError('item argument must be an instance of string')
        item_value_dict = self.__preference_data_structure[issue][1]
        max_value = max(float(x) for x in item_value_dict.values())
        return float(item_value_dict[item]), max_value

    def get_weights(self):
        '''
        this method returns all weights of preference
        :return: dict of weights
        '''
        data_structure = self.__preference_data_structure
        items = data_structure.items()
        return {key: value[0] for key, value in items if (key != 'discount_factor' and key != 'reservation')}

    def update_weight(self, new_weight: float, issue: str):
        """
        This method updates the weight of issue
        :param new_weight:
        :param issue: the issue (e.g. 'Brand') that must be changed its weight
        :return:
        """
        self.__preference_data_structure[issue][0] = new_weight

    def update_value(self, new_value: float, issue: str, item: str):
        """
        This method updates the value of item in special issue
        :param new_value:
        :param issue: e.g. 'Brand'
        :param item: e.g. 'Lenovo'
        :return:
        """
        self.__preference_data_structure[issue][1][item] = new_value

    def get_initial_preference(self):
        """
        preference = {
        'Brand': [0.33, {'Lenovo': 1.0, 'Assus': 1.0, 'Mac': 1.0}],
        'Monitor': [0.33, {'15': 1.0, '10': 1.0, '11': 1.0}],
        'HDD': [0.33, {'1T': 1.0, '2T': 1.0, '3T': 1.0}]
        }
        :return: preference
        """
        initial_preference_data_structure = {}
        size = len(self.__preference_data_structure)-2
        for issue, value in self.__preference_data_structure.items():
            if issue != 'discount_factor' and issue != 'reservation':
                temp_list = [(1.0/size),]
                temp_dict = {}
                for item, val in value[1].items():
                    temp_dict[item] = 1.0
                temp_list.append(temp_dict)
                initial_preference_data_structure[issue] = temp_list
        initial_preference_data_structure['discount_factor'] = self.__preference_data_structure['discount_factor']
        initial_preference_data_structure['reservation'] = self.__preference_data_structure['reservation']
        initial_preference = Preference(preference_data_structure=initial_preference_data_structure)
        return initial_preference

    def get_issue_ItemValue(self, issue):
        '''
        this method gives issue and returns item, value
        :param issue: issue
        :return: {'Lenovo': 10, 'Assus': 20, 'Mac': 30}
        '''
        return self.get_preference_data_structure()[issue][1]

    def __copy__(self):
        """preference_data_structure = {
            'Brand': [0.45, {'Lenovo': 10, 'Assus': 20, 'Mac': 30}],
            'Monitor': [0.18, {'15': 30, '10': 25, '11': 20}],
            'HDD': [0.38, {'1T': 25, '2T': 32, '3T': 35}],
            'discount factor = 1,
            'reservation value = 0
        }"""
        new_instance = None
        # if self.__domain_name is not None and self.__xml_file_name is not None:
        #     new_instance = Preference(self.__domain_name, self.__xml_file_name)
        # else:
        m_initial_preference_data_structure = {}
        for issue, value in self.__preference_data_structure.items():
            if issue != 'discount_factor' and issue != 'reservation':
                temp_list = [value[0], ]
                temp_dict = {}
                for item, val in value[1].items():
                    temp_dict[item] = val
                temp_list.append(temp_dict)
                m_initial_preference_data_structure[issue] = temp_list
        m_initial_preference_data_structure['discount_factor'] = self.__preference_data_structure['discount_factor']
        m_initial_preference_data_structure['reservation'] = self.__preference_data_structure['reservation']
        new_instance = Preference(preference_data_structure=m_initial_preference_data_structure)
        return new_instance

    def generate_random_bid(self):
        issue_items = {}
        preference_data_structure = self.__preference_data_structure
        for issue in preference_data_structure:
            if issue != 'discount_factor' and issue != 'reservation':
                issue_item = list((preference_data_structure[issue][1]).keys())
                issue_items[issue] = random.choice(issue_item)

        bid = Bid(issue_items)
        return bid

    def get_discount_factor(self):
        '''
        :return: discount_factor
        '''
        return self.__d

    def get_reservation(self):
        '''
        :return: reservation
        '''
        return self.__reservation

    def get_best_bid(self):
        issues_item = {}
        mValues = self.__preference_data_structure.copy()
        mValues.pop('discount_factor', None)  # remove distinct factor
        mValues.pop('reservation', None)  # remove reservation value
        for key, value in mValues.items():
            issues_item[key] = max(value[1].keys(), key=lambda k: float(value[1][k]))

        best_bid = Bid(issues_item)

        return best_bid

    def get_worst_bid(self):
        issues_item = {}
        mValues = self.__preference_data_structure.copy()
        mValues.pop('discount_factor', None)  # remove distinct factor
        mValues.pop('reservation', None)  # remove reservation value
        for key, value in mValues.items():
            issues_item[key] = min(value[1].keys(), key=lambda k: float(value[1][k]))

        worst_bid = Bid(issues_item)

        return worst_bid




    def __repr__(self):
        s = '{'
        for issue, weight_item_value in self.__preference_data_structure.items():
            s += issue
            s += ': ['
            s += str(weight_item_value[0])
            s += ', {'
            if issue != 'discount_factor' and issue != 'reservation':
                for item, value in (weight_item_value[1]).items():
                    s += str(item)
                    s += ': '
                    s += str(value)
                    s += ', '
            if issue == 'discount_factor':
                s += weight_item_value
            if issue == 'reservation':
                s += weight_item_value
            s += '}, '
            s += '] '
        s += '}'
        return s
